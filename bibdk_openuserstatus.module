<?php
module_load_include('inc', 'bibdk_openuserstatus', 'includes/bibdk_openuserstatus.form');

/**
 * Implements hook_menu.
 */
function bibdk_openuserstatus_menu() {
  $items['userstatus/pickuplib'] = array(
    'page callback' => 'bibdk_openuserstatus_new_pickuplibrary_selected',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/bibdk_userstatus.ajax.inc',
  );
  return $items;
}

/**
 * Impelements user_profile_tabs (
 * @see ding_user.module)
 * */
function bibdk_openuserstatus_user_profile2_tabs() {
  global $user;
  $username = isset($user->mail) ? ' - ' . $user->mail : '';
  $ret = new stdClass();
  $ret->label = t('my_loanerstatus @username', array('@username' => $username), array('context' => 'bibdk_openuserstatus'));
  $ret->form = 'bibdk_openuserstatus_form';
  $ret->type = 'bibdk_openuserstatus';
  return $ret;
}

/**
 * Implement hook_ctools_plugin_api().
 */
function bibdk_openuserstatus_ctools_plugin_api($module, $api) {
  if ($module == 'page_manager' && $api == 'pages_default') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_theme().
 * @return array
 */
function bibdk_openuserstatus_theme() {
  return array(
    'bibdk_openuserstatus' => array(
      'template' => 'theme/bibdk_openuserstatus',
    ),
  );
}

/**
 * get favourite libraries; get userstatus for each favourite
 * @return array; empty array if no favourites; else [agencyId => UserStatusResponse]
 */
function bibdk_openuserstatus_request() {
  $favourites = bibdk_openuserstatus_get_favourites();
  if (empty($favourites)) {
    return array();
  }
  $ret = array();
  foreach ($favourites as $favourite) {
    $res = $favourite->getUserStatus();

    if ($res === FALSE) {
      continue;
    }

    if (isset($res['error'])) {
      $ret[$favourite->getAgencyId()] = new UserStatusResponse(NULL, $res['error']);
    }
    else {
      $ret[$favourite->getAgencyId()] = new UserStatusResponse($res['response']);
    }
  }
  return $ret;
}

/** Implements hook_bibdk_reservation_complete
 *
 * unset $_SESSION variable for given library to
 * refresh orderlist
 *
 * @param mixed $pids; an array of order pid's
 * @param mixed $result; .. orderid of completed order
 */
function bibdk_openuserstatus_bibdk_reservation_complete($pids, $result) {
  // if an order has been completed BibdkReservationOrderObject is set
  // (@see bibdk_reservation.module::bibdk_reservation_new_order_object
  $library = BibdkReservationOrderObject::GetObject()->getBranchId();
  if (strpos($library, 'DK-') === 0) {
    // strip 'DK-' from librarynumber
    $library = substr($library, 3, strlen($library));
  }
  // @TODO should we just add an order to SESSION
  // instead of updating the whole thing ??
  // if we add an order from the data available, some elements will not be set
  // and a refresh button is probably needed
  if (isset($_SESSION['userStatus'][$library])) {
    unset($_SESSION['userStatus'][$library]);
  }
}

/**
 *
 *
 * @internal TingAgency $fav
 * @return mixed
 */
function bibdk_openuserstatus_get_favourites() {
  static $ret;
  if (!isset($ret)) {
    if (!isset($_SESSION['bibdk_favourites'])) {
      _bibdk_favourite_set_agencies();
    }
    $favourites = isset($_SESSION['bibdk_favourites']) ? $_SESSION['bibdk_favourites'] : NULL;
    foreach ($favourites as $favourite) {
      $fav = unserialize($favourite);
      $ret[$fav->getAgencyId()] = $fav;
    }
  }
  return $ret;
}

/**
 * @param $agencyId
 * @return null|string
 */
function bibdk_openuserstatus_get_agencyname($agencyId) {
  $agency = new TingAgency($agencyId);
  return isset($agency->getBranch()->branchName) ? $agency->getBranch()->branchName : NULL;
}

/**
 * Gets favourite libraries for the current user
 * Returns empty array if zero libraries are found
 *
 * @return array
 */
function bibdk_openuserstatus_get_favourites_array() {
  $favourites = bibdk_openuserstatus_get_favourites();
  $arr = array();
  foreach ($favourites as $favourite) {
    $arr[$favourite->getBranch()->branchId] = $favourite->getBranch()->branchName;
  }
  return $arr;
}

/**
 * Gets favourite libraries for the current user
 * Returns empty array if zero libraries are found
 *
 * @return array
 */
function bibdk_openuserstatus_get_pickup_agencies($agencyId) {
  $favourites = bibdk_openuserstatus_get_favourites();
  $pickUpAgencies = $favourites[$agencyId]->getPickUpAgencies();

  $arr = array();
  foreach ($pickUpAgencies as $branch) {
    $arr[$branch->branchId] = $branch->branchName;
  }
  return $arr;
}

/**
 * Submit function handling submission triggered by the delete selected in the
 * reservations in process table.
 * Collects the sleceted and orderids and groups them buy associated agencyid
 *
 * @param $form
 * @param $form_state
 */
function bibdk_openuserstatus_cancel_selected_submit($form, &$form_state) {
  $values = $form_state['values']['reservations_table'];
  $cancellations = array();
  foreach ($values as $value) {
    if (!empty($value)) {
      $ids = explode(';', $value);
      $orderId = $ids[0];
      $agencyId = $ids[1];
      $cancellations[$agencyId][] = $orderId;
    }
  }
  bibdk_openuserstatus_cancel_reservations($cancellations);
}

/**
 * Requesting cancelation of orderids in $cancellations array
 *
 * @param array $cancellations
 */
function bibdk_openuserstatus_cancel_reservations($cancellations) {
  $favourites = bibdk_openuserstatus_get_favourites();
  foreach ($cancellations as $agencyId => $orderIds) {
    if (array_key_exists($agencyId, $favourites)) {
      $resp = $favourites[$agencyId]->cancelOrder($orderIds);
      if (isset($resp['error']) && !empty($resp['error'])) {
        drupal_set_message(t('An error occured and your request could not be completed. Please try again later.', array(), array('context' => 'bibdk_openuserstatus')), 'error');
      }
      else {
        drupal_set_message(t('Your order(s) was successfully canceled', array(), array('context' => 'bibdk_openuserstatus')), 'notice');
      }
    }
  }
}